package org.example.telegram;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
public class TelegramBot extends TelegramLongPollingBot {
    private final String botToken;
    private final String botUsername;
    private final GeminiService geminiService;

    private final Map<Long, String> userQuestions = new HashMap<>();

    public TelegramBot() {
        BotConfig config = new BotConfig();
        this.botToken = config.getTelegramBotToken();
        this.botUsername = config.getTelegramBotUsername();
        this.geminiService = new GeminiService();
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String userMessage = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();

            // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            if (userMessage.equalsIgnoreCase("/start") || userMessage.equalsIgnoreCase("–ø—Ä–∏–≤–µ—Ç")) {
                sendResponse(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.");
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            if (userMessage.equalsIgnoreCase("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ")) {
                sendPreliminaryAnswer(chatId);
                return;
            }
            if (userMessage.equalsIgnoreCase("–Ø –º–æ–≥—É –¥–æ–ø–æ–ª–Ω–∏—Ç—å")) {
                sendResponse(chatId, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ö–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –≤–∞–∂–Ω—ã?");
                return;
            }

            // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userQuestions.put(chatId, userMessage);

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –æ—Ç–≤–µ—Ç—É (–∫–Ω–æ–ø–∫–∏)
            sendResponseWithKeyboard(chatId,
                    "–Ø –º–æ–≥—É –¥–∞—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–æ–Ω–æ–≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏. –ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–µ–µ?",
                    "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", "–Ø –º–æ–≥—É –¥–æ–ø–æ–ª–Ω–∏—Ç—å");
        }
    }

    private void sendPreliminaryAnswer(Long chatId) {
        String userQuery = userQuestions.getOrDefault(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å");

        SendMessage initialMessage = new SendMessage();
        initialMessage.setChatId(chatId.toString());
        initialMessage.setText("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å... –û–∂–∏–¥–∞–π—Ç–µ ‚è≥");

        try {
            Message sentMessage = execute(initialMessage);

            // –ó–∞–ø—Ä–æ—Å –∫ Gemini
            String aiResponse = geminiService.getLegalAnswer(userQuery, true, true);
            String fullResponse = aiResponse + "\n\n‚öñÔ∏è –í —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —é—Ä–∏—Å—Ç–∞–º.";

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —é—Ä–∏—Å—Ç–æ–≤
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();

            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å —é—Ä–∏—Å—Ç–∞–º–∏ LexTrust");
            button.setUrl("https://lextrust.kz");

            row.add(button);
            keyboard.add(row);
            markup.setKeyboard(keyboard);

            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId.toString());
            editMessage.setMessageId(sentMessage.getMessageId());
            editMessage.setText(fullResponse);
            editMessage.setReplyMarkup(markup);

            execute(editMessage);
        } catch (TelegramApiException | IOException e) {
            sendResponse(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        }
    }

    private void sendResponse(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void sendResponseWithKeyboard(Long chatId, String text, String option1, String option2) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        row.add(option1);
        if (option2 != null) row.add(option2);
        keyboard.add(row);

        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }
}
