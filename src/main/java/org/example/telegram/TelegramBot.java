package org.example.telegram;

import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.DeleteMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

public class TelegramBot extends TelegramLongPollingBot {
    private final String botToken;
    private final String botUsername;
    private final GeminiService geminiService;
    private final Map<Long, String> userQuestions = new HashMap<>();
    private final Map<Long, String> userCategories = new HashMap<>();
    private final Map<Long, Integer> processingMessages = new HashMap<>();
    private final LanguageService languageService = new LanguageService();

    public TelegramBot() {
        BotConfig config = new BotConfig();
        this.botToken = config.getTelegramBotToken();
        this.botUsername = config.getTelegramBotUsername();
        this.geminiService = new GeminiService(config.getGeminiApiKey());
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery());
        }
    }
    private void editMessage(Long chatId, Integer messageId, String newText) {
        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(chatId.toString());
        editMessage.setMessageId(messageId);
        editMessage.setText(newText);
        editMessage.setReplyMarkup(null);

        try {
            execute(editMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        String text = message.getText().toLowerCase();
        String userLang = languageService.getUserLanguage(chatId);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º HashMap –≤–º–µ—Å—Ç–æ Map.of()
        Map<String, Runnable> commands = new HashMap<>();
        commands.put("/start", () -> startInteraction(chatId));
        commands.put("–ø—Ä–∏–≤–µ—Ç", () -> startInteraction(chatId));
        commands.put("hello", () -> startInteraction(chatId));
        commands.put("—Å”ô–ª–µ–º", () -> startInteraction(chatId));
        commands.put("üåç —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", () -> sendLanguageSelection(chatId));
        commands.put("üåç change language", () -> sendLanguageSelection(chatId));
        commands.put("üåç —Ç—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É", () -> sendLanguageSelection(chatId));
        commands.put("–∑–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", () -> restartInteraction(chatId, userLang));
        commands.put("ask another question", () -> restartInteraction(chatId, userLang));
        commands.put("—Ç–∞“ì—ã –±—ñ—Ä —Å“±—Ä–∞“õ “õ–æ—é", () -> restartInteraction(chatId, userLang));
        commands.put("—Å–≤—è–∑–∞—Ç—å—Å—è", () -> sendResponse(chatId, MessageService.getMessage(userLang, "contact")));
        commands.put("contact", () -> sendResponse(chatId, MessageService.getMessage(userLang, "contact")));
        commands.put("–±–∞–π–ª–∞–Ω—ã—Å—É", () -> sendResponse(chatId, MessageService.getMessage(userLang, "contact")));
        commands.put("–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", () -> sendPreliminaryAnswer(chatId));
        commands.put("enough", () -> sendPreliminaryAnswer(chatId));
        commands.put("–∂–µ—Ç–∫—ñ–ª—ñ–∫—Ç—ñ", () -> sendPreliminaryAnswer(chatId));
        commands.put("—è –º–æ–≥—É –¥–æ–ø–æ–ª–Ω–∏—Ç—å", () -> sendResponse(chatId, MessageService.getMessage(userLang, "detail_prompt")));
        commands.put("i can add more", () -> sendResponse(chatId, MessageService.getMessage(userLang, "detail_prompt")));
        commands.put("–º–µ–Ω —Ç–æ–ª—ã“õ—Ç—ã—Ä–∞ –∞–ª–∞–º—ã–Ω", () -> sendResponse(chatId, MessageService.getMessage(userLang, "detail_prompt")));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤ –º–∞–ø–µ
        if (commands.containsKey(text)) {
            commands.get(text).run();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if (!userCategories.containsKey(chatId)) {
            sendCategorySelection(chatId);
        } else {
            userQuestions.put(chatId, userQuestions.getOrDefault(chatId, "") + " " + text);

            sendResponseWithInlineKeyboard(
                    chatId,
                    MessageService.getMessage(userLang, "choose"),
                    MessageService.getMessage(userLang, "enough"),
                    MessageService.getMessage(userLang, "i_can_add_more")
            );
        }
    }


    // –ú–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    private void startInteraction(Long chatId) {
        sendResponse(chatId, "–°”ô–ª–µ–º! / –ü—Ä–∏–≤–µ—Ç! / Hi! \n –¢—ñ–ª —Ç–∞“£–¥–∞–Ω—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language");
        sendLanguageSelection(chatId);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    private void restartInteraction(Long chatId, String userLang) {
        sendResponse(chatId, MessageService.getMessage(userLang, "ask_again"));
        sendCategorySelection(chatId);
    }


    private void sendResponseWithInlineKeyboard(Long chatId, String messageText, String option1, String option2) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(messageText);

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = List.of(
                List.of(createButton(option1, "enough")),
                List.of(createButton(option2, "add_more"))
        );

        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏: " + e.getMessage());
        }
    }

    private void sendLanguageSelection(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ | Choose language | –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        keyboard.add(Collections.singletonList(createButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "set_lang_ru")));
        keyboard.add(Collections.singletonList(createButton("üá¨üáß English", "set_lang_en")));
        keyboard.add(Collections.singletonList(createButton("üá∞üáø “ö–∞–∑–∞“õ—à–∞", "set_lang_kz")));

        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);

        try {
            Message sentMessage = execute(message);
            processingMessages.put(chatId, sentMessage.getMessageId());
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }

    private void sendResponseWithKeyboard(Long chatId, String text, String... buttonLabels) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);

        List<KeyboardRow> keyboardRows = new ArrayList<>();
        KeyboardRow currentRow = new KeyboardRow();

        for (String label : buttonLabels) {
            if (currentRow.size() >= 3) { // –ï—Å–ª–∏ –≤ —Ä—è–¥—É —É–∂–µ 3 –∫–Ω–æ–ø–∫–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
                keyboardRows.add(currentRow);
                currentRow = new KeyboardRow();
            }
            currentRow.add(label);
        }

        if (!currentRow.isEmpty()) {
            keyboardRows.add(currentRow);
        }

        keyboardMarkup.setKeyboard(keyboardRows);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç " + chatId + ": " + e.getMessage());
        }
    }

    private void handleCallback(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        String callbackData = callbackQuery.getData();
        String userLang = languageService.getUserLanguage(chatId);
        if (callbackData.equals("ask_again")) {
            restartInteraction(chatId, userLang);
            return;
        }
        if (callbackData.equals("contact")) {
            sendResponse(chatId, MessageService.getMessage(userLang, "contact"));
            return;
        }
        if (callbackData.startsWith("set_lang_")) {
            String newLang = switch (callbackData) {
                case "set_lang_ru" -> "ru";
                case "set_lang_en" -> "en";
                case "set_lang_kz" -> "kz";
                default -> userLang;
            };

            languageService.setUserLanguage(chatId, newLang);
            deleteMessage(chatId, messageId); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            sendResponse(chatId, MessageService.getMessage(newLang, "language_saved"));

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            sendCategorySelection(chatId);
            return;
        }

        Map<String, String> categoryNames = Map.of(
                "auto", MessageService.getMessage(userLang, "auto"),
                "labor", MessageService.getMessage(userLang, "labor"),
                "real_estate", MessageService.getMessage(userLang, "real_estate"),
                "family", MessageService.getMessage(userLang, "family"),
                "other", MessageService.getMessage(userLang, "other")
        );

        if (categoryNames.containsKey(callbackData)) {
            userCategories.put(chatId, callbackData);
            sendResponse(chatId, MessageService.getMessage(userLang, "selected_category") + ": " +
                    categoryNames.get(callbackData) + ". " +
                    MessageService.getMessage(userLang, "ask_question"));
        }
        if (callbackData.equals("enough")) {
            if (userQuestions.containsKey(chatId) && userQuestions.get(chatId).length() > 0) {
                sendPreliminaryAnswer(chatId);
                userQuestions.remove(chatId); // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            } else {
                sendResponse(chatId, MessageService.getMessage(userLang, "no_text_to_send"));
            }
            return;
        }

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –º–æ–≥—É –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ"
        if (callbackData.equals("add_more")) {
            sendResponse(chatId, MessageService.getMessage(userLang, "detail_prompt"));
            return;
        }

    }



    private void sendFollowUpOptions(Long chatId) {
        final String userLang = languageService.getUserLanguage(chatId); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(MessageService.getMessage(userLang, "follow_up")); // –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = List.of(
                List.of(createButton(MessageService.getMessage(userLang, "contact_us"), "contact")),
                List.of(createButton(MessageService.getMessage(userLang, "ask_more"), "ask_again"))
        );
        markup.setKeyboard(keyboard);

        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ follow-up —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + chatId + ": " + e.getMessage());
        }
    }



    private void sendPreliminaryAnswer(Long chatId) {
        final String userLang = languageService.getUserLanguage(chatId);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∞–Ω–∞–ª–∏–∑–µ –∏ –æ–∂–∏–¥–∞–Ω–∏–∏
        Message analyzingMessage = sendResponse(chatId, MessageService.getMessage(userLang, "analyzing"));
        Message waitingMessage = sendResponse(chatId, MessageService.getMessage(userLang, "waiting"));

        if (waitingMessage == null) return;

        processingMessages.put(chatId, waitingMessage.getMessageId());

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        final String userQuery = userQuestions.getOrDefault(chatId, MessageService.getMessage(userLang, "unknown_question"));
        final String category = userCategories.getOrDefault(chatId, MessageService.getMessage(userLang, "other"));

        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ò–ò —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
        final String aiResponse = geminiService.getLegalAnswer(languageService.getUserLanguage(chatId), userQuery, true, true, category);

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."
        if (analyzingMessage != null) {
            deleteMessage(chatId, analyzingMessage.getMessageId());
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–∂–∏–¥–∞–π—Ç–µ..." –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        if (processingMessages.containsKey(chatId)) {
            int messageId = processingMessages.remove(chatId);
            editMessage(chatId, messageId, aiResponse + "\n\n‚öñÔ∏è " + MessageService.getMessage(userLang, "legal_advice"));
        } else {
            sendResponse(chatId, aiResponse + "\n\n‚öñÔ∏è " + MessageService.getMessage(userLang, "legal_advice"));
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º follow-up –∫–Ω–æ–ø–∫–∏
        sendFollowUpOptions(chatId);

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        userQuestions.remove(chatId);
        userCategories.remove(chatId);
    }





    private void sendCategorySelection(Long chatId) {
        final String language = languageService.getUserLanguage(chatId);

        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(MessageService.getMessage(language, "category_prompt"));

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = Arrays.asList(
                Arrays.asList(
                        createButton(MessageService.getMessage(language, "auto"), "auto"),
                        createButton(MessageService.getMessage(language, "labor"), "labor")
                ),
                Arrays.asList(
                        createButton(MessageService.getMessage(language, "real_estate"), "real_estate"),
                        createButton(MessageService.getMessage(language, "family"), "family")
                ),
                Collections.singletonList(
                        createButton(MessageService.getMessage(language, "other"), "other")
                )
        );

        markup.setKeyboard(keyboard);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + chatId + ": " + e.getMessage());
        }
    }




    private InlineKeyboardButton createButton(final String category, final String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton(category);
        button.setCallbackData(callbackData);
        return button;
    }

    private Message sendResponse(final Long chatId, final String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        try {
            return execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + chatId + ": " + e.getMessage());
            return null;
        }
    }


    private void editMessage(final Long chatId, final int messageId, final String newText) {
        try {
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId.toString());
            editMessage.setMessageId(messageId);
            editMessage.setText(newText);
            execute(editMessage);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è " + messageId + " –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + chatId + ": " + e.getMessage());
        }
    }

    private void deleteMessage(final Long chatId, final int messageId) {
        try {
            execute(new DeleteMessage(chatId.toString(), messageId));
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è " + messageId + " –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + chatId + ": " + e.getMessage());
        }
    }

}
